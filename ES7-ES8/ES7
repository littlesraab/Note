ES7
  Array.prototype.includes():1.是一个替代indexOf()的方法,用来检查数组中是否存在值,返回一个布尔值.
                             2.还能在字符串中使用includes().
  
  字符填充函数padStart()和padEnd():1.padStart()在开始部位填充,返回一个给出长度的字符串,填充物给定字符串把字符串填充到期望的长度,从字符串的左边开始.
                                  2.padEnd()是从字符串的尾端右边开始填充.
                                  3.两个方法的第二个参数都是用于填充的字符.
  
  异步函数(async/await):1.async表示这是一个async函数,它就是Generator函数的语法糖,await只能用在这个函数里(var start = async function () { }),即在
                          async函数的上下文中,async函数就是将Generator函数的星号(*)替换成async,将yield替换成await,async函数的执行与普通函数一模一
                          样,async函数完全可以看作多个异步操作包装成的一个Promise对象,而await命令就是内部then命令的语法糖.
                        2.async函数返回的是Promise对象,可以作为await命令的参数,而async函数内部return语句返回的值,会成为then方法回调函数的参数,即只
                          有async函数内部的异步操作执行完才会执行then方法指定的回调函数.
                        3.async函数返回的Promise对象必须等到内部所有await命令后面的Promise对象执行完才会发生状态改变,除非遇到return语句或者抛出错误.
                        4.只要一个await语句后面的Promise变为reject,那么整个async函数都会中断执行.
                        5.await表示在这里等待promise返回结果了再继续执行,而await后面跟着的应该是一个promise对象,而其他对象也可以,但会立即执行.
                        6.当Promise对象状态变为reslove时await获得返回值,而且不必写.then(..),可直接可以得到返回值.
                        7.当Promise对象状态变为reject时awiat可捕捉错误,而且.catch(..)不用写,可直接用标准的try catch语法捕捉错误,最好把await命令放在
                          try...catch代码块中.
                        8.如果多个await命令后面的异步操作不存在继发关系,最好让它们同时触发.
                        9.await看起来就像是同步代码,所以可写在for循环里.
