Module的语法
  概述:ES6模块的设计思想是尽量的静态化,使得编译时就能确定模块的依赖关系以及输入和输出的变量,ES6模块是通过export命令显式指定输出的代码,再通过import命令输
       入(import { stat, exists, readFile } from 'fs';即加载了三个方法),但没法引用ES6模块本身,因为它不是对象,ES6的模块自动采用严格模式,而ES6模块顶层
       的this指向undefined,即不应该在顶层代码使用this.
  export命令:模块功能主要由两个命令构成,export和import,export命令用于规定模块的对外接口,import命令用于输入其他模块提供的功能,一个模块就是一个独立的文
             件,该文件内部的所有变量外部无法获取,如果你希望外部能够读取模块内部的某个变量就必须使用export关键字输出该变量(export var firstName='Michael';
             或者 var firstName = 'Michael'; export {firstName};(优先考虑这种写法)),export命令除了输出变量还可以输出函数或类,通常情况export输出的变量
             就是本来的名字,但是可以使用as关键字重命名,export命令规定的是对外的接口,必须与模块内部的变量建立一一对应关系,export命令可以出现在模块的任何位
             置,只要处于模块顶层就可以,如果处于块级作用域内就会报错.
  import命令:使用export命令定义了模块的对外接口以后其他JS文件就可以通过import命令加载这个模块(import {firstName, lastName, year} from './profile';),
             大括号里面的变量名必须与被导入模块对外接口的名称相同,如果想为输入的变量重新取一个名字,import命令要使用as关键字将输入的变量重命名,import后面
             的from指定模块文件的位置,可以是相对路径,也可以是绝对路径,.js后缀可以省略,而import命令具有提升效果,会提升到整个模块的头部首先执行,由于import
             是静态执行,所以不能使用表达式和变量,这些只有在运行时才能得到结果的语法结构.
  模块的整体加载:除了指定加载某个输出值还可以使用整体加载,即用星号(*)指定一个对象,所有输出值都加载在这个对象上面,模块整体加载所在的那个对象,应该是可以静态分
               析的,所以不允许运行时改变.
  export default命令:为模块指定默认输出(export default function () { console.log('foo');}),其他模块加载该模块时import命令可以为该匿名函数指定任意名字,
                    需要注意的是这时import命令后面不使用大括号,export default命令用在非匿名函数前也是可以的,一个模块只能有一个默认输出,因此export default
                    命令只能使用一次,export default就是输出一个叫做default的变量或方法,然后系统允许你为它取任意名字,export default也可以用来输出类.
  export 与 import 的复合写法:如果在一个模块之中先输入后输出同一个模块,import语句可以与export语句写在一起(export { foo, bar } from 'my_module';),也可以
                             模块的接口改名和整体输出(export * from 'my_module';),默认接口(export { default } from 'foo';),具名接口改为默认接口
                             (export { es6 as default } from './someModule';),
                             默认接口也可以改名为具名接口(export { default as es6 } from './someModule';).

