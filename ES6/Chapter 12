Reflect
  概述:1.Reflect对象与Proxy对象一样是ES6为了操作对象而提供的新API,将Object对象的一些明显属于语言内部的方法放到Reflect对象上,即从Reflect对象上可以拿到
         语言内部的方法.
       2.也修改某些Object方法的返回结果,让其变得更合理,让Object操作都变成函数行为.
       3.而且Reflect对象的方法与Proxy对象的方法一一对应,只要是Proxy对象的方法,就能在Reflect对象上找到对应的方法,方便Proxy对象的应用.
       
  静态方法:Reflect对象一共有13个静态方法.
    Reflect.get(target, name, receiver):1.查找并返回target对象的name属性.
                                        2.如果没有该属性则返回undefined,若name属性部署了读取函数(getter),则读取函数的this绑定receiver.
                                        3.若第一个参数不是对象,Reflect.get方法会报错.
                                        
    Reflect.set(target, name, value, receiver):1.设置target对象的name属性等于value.
                                               2.若name属性设置了赋值函数,则赋值函数的this绑定receiver.
                                               3.若第一个参数不是对象,Reflect.set会报错.
                                               
    Reflect.has(obj, name):1.对应name in obj里面的in运算符.
                           2.若第一个参数不是对象,Reflect.has和in运算符都会报错.
                           
    Reflect.deleteProperty(obj, name):1.等同于delete obj[name],用于删除对象的属性,此方法返回一个布尔值
                                      2.若删除成功或被删除的属性不存在,返回true.
                                      3.若删除失败,被删除的属性依然存在,返回false.
                                      
    Reflect.construct(target, args):等同于new target(...args),即不使用new来调用构造函数的方法.
    
    Reflect.getPrototypeOf(obj):1.用于读取对象的__proto__属性,对应Object.getPrototypeOf(obj).
                                2.但若参数不是对象,Object.getPrototypeOf()会将这个参数转为对象后再运行,而Reflect.getPrototypeOf()会报错.
                                
    Reflect.setPrototypeOf(obj, newProto):1.用于设置对象的__proto__属性,返回第一个参数对象,对应Object.setPrototypeOf(obj, newProto).
                                          2.若Object.setPrototypeOf()会返回第一个参数本身,而Reflect.setPrototypeOf()会报错.
                                          
    Reflect.apply(func, thisArg, args):等同于Function.prototype.apply.call(func, thisArg, args),用于绑定this对象后执行给定函数.
    
    Reflect.defineProperty(target, propertyKey, attributes):1.等同于Object.defineProperty,用来为对象定义属性.
                                                            2.若Reflect.defineProperty的第一个参数不是对象就会抛出错误.
                                                            
    Reflect.getOwnPropertyDescriptor(target, propertyKey):1.等同于Object.getOwnPropertyDescriptor,用于得到指定属性的描述对象.
                                                          2.若第一个参数不是对象会报错.
                                                          
    Reflect.isExtensible (target):1.对应Object.isExtensible,返回一个布尔值,表示当前对象是否可扩展.
                                  2.若参数不是对象,Reflect.isExtensible会报错.
                                  
    Reflect.preventExtensions(target):用于让一个对象变为不可扩展,会返回一个布尔值表示是否操作成功.
    
    Reflect.ownKeys (target):用于返回对象的所有属性,基本等同于Object.getOwnPropertyNames与Object.getOwnPropertySymbols之和.
