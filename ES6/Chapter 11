Proxy
  Proxy:用于修改某些操作的默认行为,等同于在语言层面做出修改,即在目标对象之前架设一层“拦截”,外界对该对象的访问都必须先通过这层拦截,因此可以对外界的访问进
        行过滤和改写,ES6原生提供Proxy构造函数用来生成Proxy实例(var proxy = new Proxy(target, handler);),其中new Proxy()表示生成一个Proxy实例,
        target参数表示所要拦截的目标对象,handler参数也是一个对象,用来定制拦截行为,第一个参数是所要代理的目标对象,第二个参数是一个配置对象,对于每一个被
        代理的操作,需要提供一个对应的处理函数,该函数将拦截对应的操作,而要使得Proxy起作用,必须针对Proxy实例进行操作,而不是目标对象,Proxy 实例也可以作为
        其他对象的原型对象,同一个拦截器函数可以设置拦截多个操作.
  Proxy实例的方法:
    get(target, propKey, receiver):用于拦截某个属性的读取操作,可以接受三个参数,依次为目标对象、属性名和proxy实例本身(即this关键字指向的那个对象),其中
                                   最后一个参数可选.
    set(target, propKey, value, receiver):用来拦截某个属性的赋值操作,可以接受四个参数,依次为目标对象、属性名、属性值和Proxy实例本身,其中最后一个参数
                                          可选.
    apply(target, object, args):拦截函数的调用、call和apply操作,可以接受三个参数,分别是目标对象、目标对象的上下文对象和目标对象的参数数组.
    has(target, propKey):用来拦截HasProperty操作,即判断对象是否具有某个属性时这个方法会生效,如in运算符,has方法不判断一个属性是对象自身的属性还是继承的
                         属性.
    construct(target, args):用于拦截new命令,target是目标对象,args是构建函数的参数对象,construct()返回的必须是一个对象,否则会报错.
    deleteProperty(target, propKey):用于拦截delete操作,若这个方法抛出错误或者返回false,当前属性就无法被delete命令删除,目标对象自身的不可配置的属性,不
                                    能被deleteProperty()删除.
    defineProperty(target, propKey, propDesc):拦截Object.defineProperty操作,如果目标对象不可扩展,defineProperty()不能增加目标对象上不存在的属性,如
                                              果目标对象的某个属性不可写或不可配置,则defineProperty方法不得改变这两个设置.
    getOwnPropertyDescriptor(target, propKey):拦截Object.getOwnPropertyDescriptor(),返回一个属性描述对象或者undefined.
    getPrototypeOf(target):用来拦截获取对象原型,即Object.prototype.__proto__,Object.prototype.isPrototypeOf(),Object.getPrototypeOf(),
                           Reflect.getPrototypeOf(),instanceof操作,getPrototypeOf()的返回值必须是对象或者null,若目标对象不可扩展，getPrototypeOf()
                           必须返回目标对象的原型对象.
    isExtensible(target):拦截Object.isExtensible(),该方法只能返回布尔值,否则返回值会被自动转为布尔值,它的返回值必须与目标对象的isExtensible属性保持一
                         致,否则报错.
    ownKeys(target):用来拦截对象自身属性的读取操作,即Object.getOwnPropertyNames(),Object.getOwnPropertySymbols(),Object.keys(),有三类属性会被
                    ownKeys方法自动过滤不会返回,即目标对象上不存在的属性,属性名为Symbol值和不可遍历的属性,ownKeys()还可以拦截
                    Object.getOwnPropertyNames(),ownKeys()返回的数组成员只能是字符串或Symbol值,否则报错,若目标对象自身包含不可配置的属性,则该属性必
                    须被ownKeys方法返回,若目标对象是不可扩展的,ownKeys()返回的数组中必须包含原对象的所有属性,且不能包含多余的属性.
    preventExtensions(target):拦截Object.preventExtensions(),该方法必须返回一个布尔值,否则会被自动转为布尔值,该方法只有目标对象不可扩展时
                              (即Object.isExtensible(proxy)为false),proxy.preventExtensions才能返回true.
    setPrototypeOf(target, proto):用来拦截Object.setPrototypeOf(),该方法只能返回布尔值,否则会被自动转为布尔值,若如果目标对象不可扩展,
                                  setPrototypeOf()不得改变目标对象的原型.
    Proxy.revocable():返回一个可取消的Proxy实例,该方法返回一个对象,该对象的proxy属性是Proxy实例,revoke属性是一个函数,可以取消Proxy实例,可用于目标对象
                      不允许直接访问,必须通过代理,一旦访问结束就收回代理权,不允许再次访问.
    this问题:在Proxy代理的情况下,目标对象内部的this关键字会指向Proxy代理,但有些原生对象的内部属性只有通过正确的this才能拿到,所以Proxy也无法代理这些原生对
             象的属性.
