Set和Map数据结构
  Set:1.是ES6提供新的数据结构,它类似于数组,但是成员的值都是唯一的,无重复值.
      2.Set本身是一个构造函数,用来生成Set数据结构,Set函数可以接受一个数组(或者具有iterable接口的其他数据结构)作为参数来初始化,向Set加入值的时候,不会发
        生类型转换,而且两个对象总是不相等的.
  
  Set实例的属性和方法:1.Set.prototype.constructor指向Set函数,Set.prototype.size返回Set实例的成员总数.
                     2.add(value)添加某个值,delete(value)删除某个值,has(value)返回一个布尔值表示该值是否为Set的成员,clear()清除所有成员.
                     3.keys()返回键名的遍历器,values()返回键值的遍历器,entries()返回键值对的遍历器,forEach()使用回调函数遍历每个成员,遍历主要使用
                       for...of.
  
  WeakSet:1.WeakSet结构与Set类似,也是不重复的值的集合,但是其成员只能是对象,不能是其他类型的值.
          2.其次WeakSet中的对象都是弱引用,即垃圾回收机制不考虑WeakSet对该对象的引用,即如果其他对象都不再引用该对象,那么垃圾回收机制会自动回收该对象所占
            用的内存,不考虑该对象还存在于WeakSet之中,所以WeakSet的成员是不适合引用的,适合临时存放一组对象,以及存放跟对象绑定的信息,ES6规定WeakSet不可
            遍历.
  
  Map:1.是ES6提供新的数据结构,它类似于对象,也是键值对的集合,但“键”的范围不限于字符串,各种类型的值(包括对象)都可以当作键,提供了“值—值”的对应.
      2.本身是一个构造函数,Map也可以接受一个数组作为参数,该数组的成员是一个个表示键值对的数组(任何具有Iterator接口且每个成员都是一个双元素的数组的数据
        结构都可以当作Map构造函数的参数),Map的键实际上是跟内存地址绑定的,只要内存地址不一样就视为两个键.
  
  Map实例的属性和操作方法:1.size属性返回 Map 结构的成员总数.
                         2.set(key,value)方法设置键名key对应的键值为value,get(key)读取key对应的键值,has方法返回一个布尔值,表示某个键是否在当前Map对
                           象之中,delete(key)删除某个键,返回true,clear()清除所有成员.
                         3.keys()返回键名的遍历器,values()返回键值的遍历器,entries()返回键值对的遍历器,forEach()使用回调函数遍历每个成员.
  
  WeakMap:1.与Map结构类似,也是用于生成键值对的集合,只接受对象作为键名(null除外),不接受其他类型的值作为键名.
          2.WeakMap的键名所指向的对象,不计入垃圾回收机制,WeakMap的专用场合就是,它的键所对应的对象,可能会在将来消失.
