Promise对象
  Promise含义:可理解为一个容器,里面保存着某个未来才会结束的事件(通常是一个异步操作)的结果,从语法上说Promise是一个对象,从它可以获取异步操作的消息,而且
              Promise提供统一的API,各种异步操作都可以用同样的方法进行处理,Promise对象的状态不受外界影响,Promise对象代表一个异步操作,有三种状态,分别是
              pending(进行中),fulfilled(已成功)和rejected(已失败),只有异步操作的结果可以决定当前是哪一种状态,而任何其他操作都无法改变这个状态,而且
              一旦状态改变就不会再变,任何时候都可以得到这个结果,Promise对象的状态改变只有两种可能,即从pending变为fulfilled和从pending变为rejected,
              只要这两种情况发生就不会再变了,一直保持这个结果,若改变已经发生,你再对Promise对象添加回调函数,也会立即得到这个结果,但Promise无法取消,
              一旦新建它就会立即执行,无法中途取消,而且如果不设置回调函数,Promise内部抛出的错误,不会反应到外部,当处于pending状态时无法得知目前进展到哪
              一个阶段(刚刚开始还是即将完成).
   基本用法:Promise对象是一个构造函数,用来生成Promise实例,
           (例:const promise = new Promise(function(resolve, reject) {if (/* 异步操作成功 */){resolve(value);} else {reject(error);}})),
           Promise构造函数接受一个函数作为参数,该函数的两个参数分别是resolve和reject,resolve函数将Promise对象的状态从"未完成"变为"成功"(即从pending
           变为resolved),在异步操作成功时调用并将异步操作的结果,作为参数传递出去,而reject函数的作用是将Promise对象的状态从"未完成"变为"失败"(即从
           pending变为rejected),在异步操作失败时调用并将异步操作报出的错误,作为参数传递出去,Promise实例生成以后可用then方法分别指定resolved状态和
           rejected状态的回调函数(例:promise.then(function(value) {//success}, function(error) {//failure});),then方法可以接受两个回调函数作为参
           数,第一个回调函数是Promise对象的状态变为resolved时调用,第二个是Promise对象的状态变为rejected时调用,而第二个函数是可选的，这两个函数都接受
           Promise对象传出的值作为参数,reject函数的参数通常是Error对象的实例表示抛出的错误,而resolve函数的参数除了正常的值以外,还可能是另一个Promise
           实例,Promise新建后就会立即执行,另外调用resolve或reject并不会终结Promise的参数函数的执行,因为因为Promise操作是在本轮事件循环的末尾执行,总是
           晚于本轮循环的同步任务,所以最好在它们前面加上return语句.
   Promise.prototype.then():then方法是定义在原型对象Promise.prototype上的,它的作用是为Promise实例添加状态改变时的回调函数,then方法的第一个参数是
                            resolved状态的回调函数,第二个参数(可选)是rejected状态的回调函数,then方法返回的是一个新的Promise实例(不是原来那个Promise
                            实例),因此可以采用链式写法,即then方法后面再调用另一个then方法.
