变量解构赋值

  解构:1.按照一定模式,从数组/对象中提取值,对变量进行赋值,即只要等号两边的模式相同,左边的变量就会被赋予等号右边相对应的值(例:let [a, b, c] = [1, 2, 3];).
       2.若解构不成功,变量的值为undefined.
       3.若两边模式不完全相同,也可解构,但赋值会不完全(若等号右边不是对象/数组,会先转化为对象)(例:let [x, y] = [1, 2, 3]; x // 1 y // 2).
       
  默认值:1.解构赋值允许指定默认值(例: let [x = 1] = []),ES6用"==="判断一个位置是否有值,即要严格等于undefined默认值才会生效.
         2.若默认值是表达式,则在使用时才会,即表达式是惰性求值的.
         3.默认值可以引用解构赋值的其他变量,但该变量必须已经声明,识别为顺序从左到右(例:let: [x = 1, y = x] = [],xy都会等于1).
         
  对象解构变量:1.数组解构需要次序对应,由位置决定,而变量只要属性名相同即可(let { bar, foo } = { foo: "aaa", bar: "bbb" } foo = "aaa" bar = "bbb").
              2.若变量名与属性名不一致,需写为(let {a(匹配模式):b(变量)} = {a:"c"}, 得到 b = "c"),即先找到同名属性,再赋值给对应的变量(由于数组本质是
              特殊的对象，因此可以对数组进行对象属性的解构),真正被赋值的是后者而不是前者.
              3.对象的解构也可以指定默认值,默认值生效的条件是对象的属性值严格等于undefined,如果解构失败变量的值等于undefined.
              
  字符串解构变量:1.字符串解构时会被转换成了一个类似数组的对象(例:const [a, b, c, d, e] = 'hello').
                2.可对其length属性解构(let {length : len} = 'he' len = 2).
                
  圆括号问题:1.因为解构赋值中模式出现圆括号会容易出现歧义,所以尽量不要在模式中使用圆括号.
             2.变量声明语句(例:let [(a)] = [1];),函数参数(例:function f([(z)]) { return z; }),赋值语句的模式(例:([a]) = [5];).
             3.只有赋值语句(声明语句不行)的非模式部分,才可使用圆括号.
  
  用途:1.交换变量值(例:[x, y] = [y, x]).
       2.从函数返回多个值(例:let [a, b, c] = example();).
       3.函数参数的定义(例:function f([x, y, z]) { ... } f([1, 2, 3]);).
       4.提取JSON数据.
       5.函数参数的默认值等.
  
