变量解构赋值
  解构:按照一定模式,从数组/对象中提取值,对变量进行赋值(即只要等号两边的模式相同,左边的变量就会被赋予等号右边相对应的值),若解构不成功,变量的值为undefined,
       若两边模式不完全相同,也可解构,但赋值会不完全(若等号右边不是对象/数组,会先转化为对象)(例:let [a, b, c] = [1, 2, 3]).
  默认值:解构赋值允许指定默认值(例: let [x = 1] = [])(ES6用"==="判断一个位置是否有值,即要===undefined默认值才会生效),若默认值是表达式,则在使用时才会
         求值,默认值可以引用解构赋值的其他变量,但该变量必须已经声明(顺序从左到右,例:let: [x = 1, y = x] = [],xy都会等于1).
  对象解构变量:数组解构需要次序对应,由3位置决定,而变量只要属性名相同即可(let { bar, foo } = { foo: "aaa", bar: "bbb" } foo = "aaa" bar = "bbb"),
              若变量名与属性名不一致,需写为(let {a(模式):b(变量)} = {a:"c"}, 得到 b = "c"),即先找到同名属性,再赋值给对应的变量(由于数组本质是特殊
              的对象，因此可以对数组进行对象属性的解构).
  字符串解构变量:字符串解构时会被转换成了一个类似数组的对象(例:const [a, b, c, d, e] = 'hello'),还可对其length属性解构(let {length : len} = 'he' 
                len = 2).
  圆括号问题:因为解构赋值中模式出现圆括号会容易出现歧义,所以尽量不要在模式中使用圆括号,只有赋值语句(声明语句不行)的非模式部分，才可使用圆括号.
  用途:交换变量值(例:[x, y] = [y, x])、从函数返回多个值、函数参数的定义、提取JSON数据、函数参数的默认值等.
  
