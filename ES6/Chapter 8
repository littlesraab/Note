对象的扩展
  属性的简洁表示法:ES6允许直接写入变量和函数,作为对象的属性和方法(const foo = 'bar';const baz = {foo}; 等于 const baz = {foo: foo};),属性名为变量
                 名,属性值为变量的值.
  属性名表达式:ES6允许字面量定义对象时用表达式作为对象的属性名,即把表达式放在方括号内(let obj = {[propKey]: true,['a' + 'bc']: 123};),表达式还可以
              用于定义方法名,但属性名表达式与简洁表示法不能同时使用,属性名表达式如果是一个对象,默认情况下会自动将对象转为字符串[object Object].
  Object.is():用来比较两个值是否严格相等,与严格比较运算符(===)的行为基本一致,不会转换数据类型.
  Object.assign():用于对象的合并,将源对象的所有可枚举属性,复制到目标对象,方法的第一个参数是目标对象,后面的参数都是源对象,若目标对象与源对象有同名属性,
                  或多个源对象有同名属性,则后面的属性会覆盖前面的属性,若参数不是对象,则会先转成对象,然后返回(undefined和null是目标对象会报错),方法拷
                  贝的属性是有限制的,只拷贝源对象的自身属性(不拷贝继承属性),也不拷贝不可枚举的属性.
  属性的可枚举性和遍历:对象的每个属性都有一个描述对象(Descriptor),用来控制该属性的行为,Object.getOwnPropertyDescriptor方法可以获取该属性的描述对象,描
                     述对象的enumerable属性,称为”可枚举性“,如果该属性为false，就表示某些操作会忽略当前属性(如for...in循环,Object.keys(),
                     JSON.stringify(),Object.assign()).
  __proto__属性:用来读取或设置当前对象的prototype对象,其本质上是一个内部属性,所以应尽量用而是使用下面的Object.setPrototypeOf()(写操作)、
                Object.getPrototypeOf()(读操作)、Object.create()(生成操作)代替.
  Object.setPrototypeOf(object, prototype):用来设置一个对象的prototype对象，返回参数对象本身,若第一个参数不是对象,会自动转为对象(undefined和null会
                                           报错).
  Object.getPrototypeOf(obj):用于读取一个对象的原型对象.
  super关键字:指向当前对象的原型对象,类似this关键字,super关键字表示原型对象时,只能用在对象的方法之中,用在其他地方都会报错.
  Object.keys(),Object.values(),Object.entries():Object.keys方法返回一个数组,成员是参数对象自身的(不含继承的)所有可遍历属性的键名,Object.values方
                                                 法返回一个数组,成员是参数对象自身的(不含继承的)所有可遍历属性的键值,Object.entries方法返回一个数组,
                                                 成员是参数对象自身的(不含继承的)所有可遍历属性的键值对数组.
