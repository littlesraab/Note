Event Loop
  1.JS为单线程语言,即同一时间只能做一件事,虽然HTML5可允许JS创建多个线程,但子线程完全受主线程控制,且不得操作DOM.
    1.JS分为同步和异步任务.
      1.异步任务是不会进入主线程的任务,而是进入"任务队列",只有"任务队列"通知主线程某个异步任务可以执行了,该任务才会进入主线程执行(一般是IO设备事件,用户
        产生的事件(如click),及指定过的回调函数等).
      2.同步人物是进入主线程,前一个任务执行完毕,才能进行下一个任务.
    2.JS异步机制(同步执行也一样,可看作无异步任务的异步执行)(不断重复执行).
      1.所有同步任务在主线程上执行,形成执行栈.
      2.主线程外有一个"任务队列",只要异步任务有了运行结果,就在"任务队列"中放置一个事件.
      3.执行栈的同步任务执行完,系统会读取"任务队列",其中的异步任务结果等待状态进入执行栈开始执行.
    3.回调函数是被主线程挂起来的代码,异步任务必须有回调函数.
    4.任务队列为先进先出的数据结构,执行栈一清空,"任务队列"中的第一位事件会自动进入主线程.
  2.JS运行机制是主线程运行,产生堆和栈,其中的代码调用API,在"任务队列"中加入事件,栈中的代码执行完毕,就会读取"任务队列",依次执行对应的回调函数(执行栈的代码
    (同步任务)总在读取"任务队列"前执行).
  3.setTimeout()/setInterval()为第一个参数为回调函数,第二个参数为推迟执行的毫秒数,当秒数为0,表示主线程结束后尽早执行回调函数.
