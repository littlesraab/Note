Scopes
  1.是一个指向app的对象,是表达式执行的上下文,scopes(作用域)模拟app的DOM结构构成自己的层次结构,可观察表达式和传播事件为HTML(视图)和JS(控制器)之间的纽带.
    1.Scopes可$watch观察model的变化,可$apply通过系统把model的更改从controllers,services等外部传播到view之中.
    2.Scopes可形成嵌套限制访问app组件的属性,同时也可以访问一些共享model的属性,嵌套scopes有两种,一种child scopes,另一种isolate scope(一般在指令中,如自
      定义指令),child scope可以访问从父scope继承的属性(原型链),而isolate scope则不可以.
    3.AngularJS存在四种作用域.
      1.普通的带原型继承的作用域的,如ng-include,ng-switch,ng-controller,directive的scope属性为true时.
      2.普通的带原型继承的并有赋值行为的作用域(ng-repeat),ng-repeat为每一个迭代项创建一个普通的有原型继承的子作用域,但同时在子作用域中创建新属性存储迭
        代项.
      3.Isolate作用域(isolate scope),当directive的scope属性为{...}时出现,该作用域没有原型继承,但可以通过'=','@'和'&'与父作用域通信.
      4.transcluded作用域,当directive属性transclude为true时出现,它也是普通的带原型继承的作用域,但它与Isolate作用域是相邻关系,即他们的$parent属性指向
        同一个父作用域,且Isolate作用域的$$nextSibling属性指向transcluded作用域.
    4.每个app都有一个root scope,可有多个child scopes,一些指令(如ng-controller)可以创建新的child scopes,新scopes被创建就会被作为child scope增加到它
      的parent scope中,构成一个树形结构,当Angular对一个属性求值时先在相关联的scope内寻找这个属性,若没找到它就会去parent scope中找一直搜到root scope为
      止.
    5.Scopes可以通过$broadcast()广播到children scopes,通过$emit()扩散到parent scope,通过$on()来监听事件和数据.
    6.在编译时编译器将directives(指令)和DOM template进行匹配.
      1.directives通常有观察directives(如{{ }}),用$watch()方法注册监听器,当表达式发生改变时directives被通知,后更新视图.
      2.另一种是监听directives(如ng-click),注册一个监听器在DOM上,当监听器被激活,这个指令将执行相应的表达式并且用$apply()方法更新视图($apply()用于传播
        模型的变化).          
      3.一般directives不会创建一个新的scope实例,然而一些命令(如ng-repeat)会创建新的child scopes并且附加child scopes到相应的DOM元素中,可用
        angular.element(aDomElement).scope()方法检索任意DOM元素对应的scope.
      4.Angular脏检查即Angular在scope模型上设置了一个监听队列来监听数据变化并更新view,每绑定一个东西到view上时Angular就会往$watch队列里插入一条$watch
        来检测它监视的model里是否有变化的东西,当浏览器接收到可以被angular context处理的事件时,$digest循环(脏检查)就会触发,遍历所有的$watch,最后更新
        dom.
        1.$watch()用于监听模型变化,当模型发生变化时会有提示($watch(watchExpression, listener, objectEquality),watchExpression为监听的对象,它可以是
          一个angular表达式或函数,listener是watchExpression变化时会被调用的函数或者表达式,它接收3个参数newValue(新值),oldValue(旧值),scope(作用域的
          引用),objectEquality为是否深度监听,如果设置为true,它告诉Angular检查所监控的对象中每一个属性的变化.
        2.脏检查可以使用三种策略:通过引用,通过集合内容,通过值.
        3.通过引用,检测到一个值完全变为一个新的值的变化,如果这个值是一个数组或者一个对象,它里面的值的改变是不会检测到的,这种策略是性能最高效的.
          ($scope.name = "newName")
        4.通过集合内容,可以检测数据(数组,JSON)和对象内部的变化,这种检测深度是比较浅,因为它不进入嵌套的集合,这种要比第一种更耗费性能,而这种策略可以最小化
          必要的副本来减少耗费.
          ($scope.names.push(newName))
        5.通过值,这种可以检测到一个任意嵌套结构的所有变化,是最强力的但是也是最耗性能的,每一次digest它都需要完整的遍历整个数据结构.
          ($scope.names[0].point = newPonit)
